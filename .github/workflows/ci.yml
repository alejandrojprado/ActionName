name: CI
on:
  push:
    branches: [ develop, master ]

jobs:

# TODO generate tag with semantic-release
#  semantic-version:
#    env:
#      GITHUB_TOKEN: ${{ github.token }}
#    runs-on: ubuntu-latest
#    steps:
#    - name: prepare env
#      uses: actions/checkout@v2
#    - name: install semantic-release
#      run: sudo npm -g install semantic-release@17.0.7 @semantic-release/git@8.0.0 @semantic-release/gitlab@4.1.0 @semantic-release/github
#    - name: run
#      run: semantic-release --no-ci
   
  check-build-push:

    runs-on: ubuntu-latest
    steps:
    - name: prepare env
      uses: actions/checkout@v2

    - name: create configuration files
      env:
        NEXUS_USER: ${{ secrets.NEXUS_USER }}
        NEXUS_PASS: ${{ secrets.NEXUS_PASS }}
      run: |
        echo "initscript {
                gradle.settingsEvaluated { settings ->
                    settings.pluginManagement {
                        repositories {
                            maven {
                                url 'https://nexus.mahisoft.com/repository/maven-public/'
                                credentials {
                                    Properties properties = new Properties()
                                    properties.load(new File('./gradle.properties').newDataInputStream())
                                    username properties.mahiNexusUsername
                                    password properties.mahiNexusPassword
                                }
                            }
                            gradlePluginPortal()
                        }
                    }
                }
            }" >> init.gradle
        echo "mahiNexusUsername=$NEXUS_USER
            mahiNexusPassword=$NEXUS_PASS
            sharedMavenUrl=https://nexus.mahisoft.com/repository/maven-public/
            snapshotUploadUrl=https://nexus.mahisoft.com/repository/maven-snapshots/
            releaseUploadUrl=https://nexus.mahisoft.com/repository/maven-releases/" >> gradle.properties
      
    - name: Build
      run: |
        test -e docker-compose.yml && docker-compose -f docker-compose.yml up -d || true
        SPRING_PROFILES_ACTIVE=build ./gradlew clean check --info --init-script ./init.gradle
        ./gradlew bootJar --init-script ./init.gradle
        
    - name: Build and push Docker image
      run: |
        docker login docker.pkg.github.com -u github.repository_owner --password ${{ github.token }}
        docker build . -t docker.pkg.github.com/${{ github.repository }}/service-test:${GITHUB_SHA::8}
        docker push docker.pkg.github.com/${{ github.repository }}/service-test:${GITHUB_SHA::8}
  